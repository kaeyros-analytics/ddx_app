library(igraph)
library(visNetwork)
library(zoo)
library(rintrojs)
library(readxl)
library(shinyjs)
library(openxlsx)
library(bcrypt)
library(glue)
library(plotly)
library(dplyr)
library(ggplot2)
library(magrittr)
library(sass)
library(shinydashboard)
library(shinythemes)
library(shiny.react)
library(shiny.router)
library(fpp2)
# library(ggfortify)
# Constructing path of relevant directories
root <- getwd()
path_data <- paste(root, "/", "input", sep="")
#path_data <- paste(root, "/", "data", sep="")
path_helpers <- paste(root, "/R", sep="")
#path_helpers <- paste(root, "/codes/helpers", sep="")
path_meta <- paste(root, "/", "meta", sep="")
file_path <- paste(path_data, "/testdata.rds", sep="")
file.exists(file_path)
file = paste(getwd(), "/us_states.geojson", sep = '')
file.exists(file)
url_path <- "https://leafletjs.com/examples/choropleth/us-states.js"
url_js = FROM_GeoJson(url_file_string = url_path)
find_funs("FROM_GeoJson")
# extented fucntion
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
find_funs("FROM_GeoJson")
url_js = geojsonR::FROM_GeoJson(url_file_string = url_path)
install.packages("geojsonR")
url_js = geojsonR::FROM_GeoJson(url_file_string = url_path)
filess = paste(getwd(), "/us_states.geojson", sep = '')
json_data <- rjson::fromJSON(file= filess)
write(filess, "test.json")
json_data <- rjson::fromJSON(file= filess)
filess = paste(getwd(), "/us_states.txt", sep = '')
file.exists(filess)
filess = paste(getwd(), "/us_states.txt", sep = '')
file.exists(filess)
file.exists(path_data)
file_path <- paste(path_data, "/testdata.rds", sep="")
file.exists(file_path)
file_path <- paste(path_data, "/us_states.geojson", sep="")
file.exists(file_path)
file_path <- paste(path_data, "/us_states.txt", sep="")
file.exists(file_path)
file_path
file_path <- paste(path_data, "/testdata.rds", sep="")
file_path
file.exists(url_path)
url_path <- "https://leafletjs.com/examples/choropleth/us-states.js"
file.exists(url_path)
url_path = "https://raw.githubusercontent.com/mlampros/DataSets/master/california.geojson"
file.exists(url_path)
filess = paste(getwd(), "/us_states.txt", sep = '')
write(filess, "test.json")
url_path = "https://leafletjs.com/examples/choropleth/us-states.js"
write(url_path, "test.json")
file_path <- paste(path_data, "/us-states.js", sep="")
class(file_path)
file_path <- paste(path_data, "/testdata.rds", sep="")
class(file_path)
file_path <- paste(path_data, "/us-states.js", sep="")
#file_us_state = paste(file_path, "/us_states.geojson", sep = '')
states <- geojsonio::geojson_read(file_path, what = "sp")
runApp()
runApp()
# use parse_time in order to create standard ambiguous date format.
df_testdata <- df_testdata %>%
mutate(date = as.Date(date , format = "%Y-%m-%d")) %>%
dplyr::select(lot_health_index, dynamic_price,avg_market_premium_price) %>%
relocate(dynamic_price, .before = lot_health_index)
# rescaling the variable lot_health_index
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_filter$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_filter$lot_health_index <- rescaled_lot_health_index
file_path <- paste(path_data, "/testdata.rds", sep="")
system.time(df_testdata <-readRDS(file = file_path))
#str(df_testdata)
# use parse_time in order to create standard ambiguous date format.
df_testdata <- df_testdata %>%
mutate(date = as.Date(date , format = "%Y-%m-%d")) %>%
dplyr::select(lot_health_index, dynamic_price,avg_market_premium_price) %>%
relocate(dynamic_price, .before = lot_health_index)
# rescaling the variable lot_health_index
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_filter$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_filter$lot_health_index <- rescaled_lot_health_index
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_testdata$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_testdata$lot_health_index <- rescaled_lot_health_index
summary(df_testdata$lot_health_index)
# use parse_time in order to create standard ambiguous date format.
df_testdata <- df_testdata %>%
mutate(date = as.Date(date , format = "%Y-%m-%d"))
file_path <- paste(path_data, "/testdata.rds", sep="")
system.time(df_testdata <-readRDS(file = file_path))
# use parse_time in order to create standard ambiguous date format.
df_testdata <- df_testdata %>%
mutate(date = as.Date(date , format = "%Y-%m-%d"))
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_testdata$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_testdata$lot_health_index <- rescaled_lot_health_index
runApp()
runApp()
runApp()
?selectInput
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade"),
dateRangeInput('dateRange',label = "PÃ©diode d'analyse : ",format = "mm/yyyy",language="fr",
start = Sys.Date() %m-% months(12), end=Sys.Date(),startview = "year",separator = " - ")
)
shinyApp(ui, server = function(input, output) { })
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateInput("date1", "Date:", value = "2012-02-29"),
# Default value is the date in client's time zone
dateInput("date2", "Date:"),
# value is always yyyy-mm-dd, even if the display format is different
dateInput("date3", "Date:", value = "2012-02-29", format = "mm/dd/yy"),
# Pass in a Date object
dateInput("date4", "Date:", value = Sys.Date()-10),
# Use different language and different first day of week
dateInput("date5", "Date:",
language = "ru",
weekstart = 1),
# Start with decade view instead of default month view
dateInput("date6", "Date:",
startview = "decade"),
# Disable Mondays and Tuesdays.
dateInput("date7", "Date:", daysofweekdisabled = c(1,2)),
# Disable specific dates.
dateInput("date8", "Date:", value = "2012-02-29",
datesdisabled = c("2012-03-01", "2012-03-02"))
)
shinyApp(ui, server = function(input, output) { })
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade"),
dateRangeInput('dateRange',label = "PÃ©diode d'analyse : ",format = "mm/yyyy",language="fr",
start = Sys.Date() %m-% months(12), end=Sys.Date(),startview = "year",separator = " - ")
)
shinyApp(ui, server = function(input, output) { })
}
runApp()
runApp()
runApp()
if (interactive()) {
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
}
if (interactive()) {
shinyApp(
ui = basicPage(
submitButton("Update View", icon("refresh")),
numericInput("num", label = "Make changes", value = 1),
#submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
}
runApp()
# subset the data frame
df_filter <- df_testdata %>%
filter( client_id == "client_0",
machine_id == "M_001") %>%
dplyr::select(lot_health_index, dynamic_price,avg_market_premium_price) %>%
relocate(dynamic_price, .before = lot_health_index)
class(df_filter)
mts_df_filter <- stats::ts(df_filter,
frequency = 12,
start = c(2001, 1),
end = c(2021, 12))
class(mts_df_filter)
head(mts_df_filter)
# Scatterplot matrices
autoplot(mts_df_filter, facets=TRUE) +
ylab("")
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_filter$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_filter$lot_health_index <- rescaled_lot_health_index
# subset the data frame to one client_id and one machine_id
mts_df_filter <- stats::ts(df_filter,
frequency = 12,
start = c(2001, 1),
end = c(2021, 12))
class(mts_df_filter)
head(mts_df_filter)
str(mts_df_filter)
# Standard exploratory tools
par(mar = c(2.5,2.5,2.5,2.5))
plot(mts_df_filter, main = "")
# Differencing the whole mts
stnry1 <- MTS::diffM(mts_df_filter) #difference operation on a vector of time series. Default order of differencing is 1.
apply(mts_df_filter, 2, tseries::adf.test)
# Alternative: lib fUnitRoots, function
apply(mts_df_filter, 2, fUnitRoots::adfTest,
lags=0, #maximum number of lags used for error term correction
type="c", #type of unit root regression
title = "ADF Test for mts_df_filter Data") #title of the project
# Differencing the whole mts
stnry1 <- MTS::diffM(mts_df_filter) #difference operation on a vector of time series. Default order of differencing is 1.
# Retest
apply(stnry1, 2, tseries::adf.test)
## VAR modeling
plot.ts(stnry1)
# Lag order identification
#We will use two different functions, from two different packages to identify the lag order for the VAR model. Both functions are quite similar to each other but differ in the output they produce. vars::VAR is a more powerful and convinient function to identify the correct lag order.
vars::VARselect(log1p(mts_df_filter),
type = "none", #type of deterministic regressors to include. We use none becasue the time series was made stationary using differencing above.
lag.max = 10) #highest lag order
# Creating a VAR model with vars
var.a.mts_df_filter <- vars::VAR(log1p(mts_df_filter),
lag.max = 1, #highest lag order for lag length selection according to the choosen ic
ic = "AIC", #information criterion
type = "none") #type of deterministic regressors to include
# we forecast over a short horizon because beyond short horizon prediction becomes unreliable or uniform
fcast1 = stats::predict(var.a.mts_df_filter, n.ahead = 100)
View(fcast1)
View(mts_df_filter)
View(df_testdata)
#par(mfrow = c(2, 2))
plot(fcast1, ylim = df_testdata$date)
#par(mfrow = c(2, 2))
plot(fcast1)
?plot
#par(mfrow = c(2, 2))
#plot(fcast1)
plot(fcast1,  plot.type = c("single"))
<Return>
Return
#par(mfrow = c(2, 2))
#plot(fcast1)
fig <- plot(fcast1,  plot.type = c("single"))
plot(fcast1,  plot.type = c("single"))
set.seed(1)
xz = zoo(ts(rnorm(20), frequency = 4, start = c(1959, 2)))
yz = zoo(ts(rnorm(20), frequency = 4, start = c(1959, 2)))
# Basic approach
plot(xz)
lines(yz, col = "red")
# Panels
plot.zoo(cbind(xz, yz))
# Overplotted
plot.zoo(cbind(xz, yz),
plot.type = "single",
col = c("red", "blue"))
# Overplotted
plot.zoo(cbind(xz, yz),
plot.type = "multiple",
col = c("red", "blue"))
# Overplotted
plot.zoo(cbind(xz, yz),
plot.type = "single",
col = c("red", "blue"))
plot.zoo(cbind(xz, yz),
plot.type = "multiple",
col = c("red", "blue"))
set.seed(1)
x = ts(rnorm(20), frequency = 4, start = c(1959, 2))
y = ts(rnorm(20), frequency = 4, start = c(1959, 2))
ts.plot(x, y, gpars = list(col = c("black", "red")))
#par(mfrow = c(2, 2))
#plot(fcast1)
fig <- ts.plot(fcast1,  plot.type = c("single"))
#par(mfrow = c(2, 2))
plot(fcast1)
View(df_testdata)
# we forecast over a short horizon because beyond short horizon prediction becomes unreliable or uniform
fcast1 = stats::predict(var.a.mts_df_filter, n.ahead = 100, df_testdata$date)
#par(mfrow = c(2, 2))
plot(fcast1)
View(fcast1)
View(df_filter)
# Creating a VAR model with vars
var.a.mts_df_filter <- vars::VAR(mts_df_filter,
lag.max = 1, #highest lag order for lag length selection according to the choosen ic
ic = "AIC", #information criterion
type = "none") #type of deterministic regressors to include
# we forecast over a short horizon because beyond short horizon prediction becomes unreliable or uniform
fcast1 = stats::predict(var.a.mts_df_filter, n.ahead = 100, df_testdata$date)
#par(mfrow = c(2, 2))
plot(fcast1)
View(var.a.mts_df_filter)
#fig <- ts.plot(fcast1,  plot.type = c("single"))
plot(var.a.mts_df_filter[["varresult"]][["dynamic_price"]][["model"]][["dynamic_price.l1"]])
#par(mfrow = c(2, 2))
par(mfrow = c(1, 2))
plot(fcast1)
#par(mfrow = c(2, 2))
par(mfrow = c(1, 1))
plot(fcast1)
#par(mfrow = c(2, 2))
par(mfrow = c(1, 1))
plot(fcast2)
urlfile <- "https://raw.githubusercontent.com/RafHo/teaching/master/geodaten_kommunizieren/datasource/lng_lat_shiny.csv"
df <- read.csv(urlfile, sep = ",", header = TRUE, encoding = "UTF-8")
View(df)
url_path = "https://raw.githubusercontent.com/mlampros/DataSets/master/california.geojson"
url_js = geojsonR::FROM_GeoJson(url_file_string = url_path)
url_path = "https://leafletjs.com/examples/choropleth/us-states.js"
url_js = geojsonR::FROM_GeoJson(url_file_string = url_path)
json_data <- rjson::fromJSON(file= url_js)
View(url_js)
rms(url_js)
plot(fcast)
plot(fcast1)
axis(side=1, at = c(3, 6, 10), labels = c("3", "6", "10"))
plot(fcast1, which = 1)
plot(fcast1, which = 1:2)
plot(fcast1)
#plot(fcast1)
plot(fcast1, which = "dynamic_price")
plot(fcast1, which = "lot_health_index")
plot(fcast1, which = fcast1[["model"]][["varresult"]][["lot_health_index"]])
plot(fcast1)
plot(fcast1, which = fcast1[["model"]][["varresult"]][["lot_health_index"]])
View(fcast1)
# extented fucntion
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
find_funs("predict")
?stats
library(help = "stats")
fcast1
#plot(fcast1)
plot(fcast1$dynamic_price)
fcast1$dynamic_price
#plot(fcast1)
plot(fcast1$fcst[1])
#plot(fcast1)
plot(fcast1)
runApp()
shiny::runApp()
