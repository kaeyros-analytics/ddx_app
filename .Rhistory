<<<<<<< HEAD
#
# db_pwd <- (db_credentials %>%
#                filter(toupper(db_name) == toupper(db_name_mpay)) %>%
#                dplyr::select(db_pwd) %>%
#                collect())$db_pwd
#
#
#
# --------------------------------------
# (04) CONNECTING R TO THE MPAY DATABASE ####
# --------------------------------------
# # Getting the data file directory
# file_path <- paste(path_data, "/", "generated_db.sqlite3", sep = "")
# # # Here we only use the function dbConnect without the parameter dbname, host, username,
# # # password because we have already saved the SQL data into RStudio
# # # creating the connection to the database
# conn <- DBI::dbConnect(RSQLite::SQLite(), file_path)
#
# # # getting list of tables available
# available_tables <- DBI::dbListTables(conn)
#=========================================
# (1) LOADING AND EXPLORING AVAILABLE DATA ####
#=========================================
# --------------------------
# (10) LOADING REQUIRED DATA ####
# --------------------------
#
# tic()
# for(k in 1:length(available_tables)){
#
#     form <- parse(text = paste(available_tables[k]," <- dbReadTable(con, '", available_tables[k], "')", sep=""))
#     eval(form)
#
# }
# for(k in 1:length(available_tables)){
#
# read the data frame from the sql database
# k <- 2
# form <- parse(text = paste(available_tables[k]," <- DBI::dbReadTable(conn, '", available_tables[k], "')", sep=""))
# eval(form)
# #k <- 2
# form <- parse(text = paste("saveRDS(", available_tables[k], ", file = '" , path_data, "/", available_tables[k], ".rds')", sep=""))
# eval(form)
#
# }
# toc()  # 0.22 sec elapsed
# (04) LOADING REQUIRED FACTS DATA
# --------------------------------
=======
library(bcrypt)
library(glue)
library(plotly)
library(dplyr)
library(ggplot2)
library(magrittr)
library(sass)
library(shinydashboard)
library(shinythemes)
library(shiny.react)
library(shiny.router)
library(fpp2)
# 1. loading required data   ####
#__________________________
# Constructing path of relevant directories
root <- getwd()
path_data <- paste(root, "/", "input", sep="")
#path_data <- paste(root, "/", "data", sep="")
path_helpers <- paste(root, "/R", sep="")
#path_helpers <- paste(root, "/codes/helpers", sep="")
path_meta <- paste(root, "/", "meta", sep="")
>>>>>>> 06548005e98f8e0e695292805bce0de7447a2ccb
file_path <- paste(path_data, "/testdata.rds", sep="")
system.time(df_testdata <-readRDS(file = file_path))
str(df_testdata)
# use parse_time in order to create standard ambiguous date format.
df_testdata <- df_testdata %>%
mutate(date = as.Date(date , format = "%Y-%m-%d"))
# rescaling the variable lot_health_index
# changing the scale initial vector
rescaled_lot_health_index <- scales::rescale(df_testdata$lot_health_index, to = c(20, 100))
# replace the variable lot_health_index through rescaled variable rescaled_lot_health_index
df_filter$df_testdata <- rescaled_lot_health_index
View(df_testdata)
names(df_testdata)
# subset the data frame
df_filter <- df_testdata %>%
filter( client_id == "client_0",
machine_id == "M_001") %>%
dplyr::select(lot_health_index, dynamic_price,avg_market_premium_price, date, fixed_price) %>%
relocate(dynamic_price, .before = lot_health_index)
mts_df_filter <- stats::ts(df_filter[- c(4,5)],
frequency = 12,
start = c(2001, 1),
end = c(2021, 12))
class(mts_df_filter)
head(mts_df_filter)
#par(mar = c(2.5,2.5,2.5,2.5))
plot(mts_df_filter, main = "")
# Lag order identification
#We will use two different functions, from two different packages to identify the lag order for the VAR model. Both functions are quite similar to each other but differ in the output they produce. vars::VAR is a more powerful and convinient function to identify the correct lag order.
vars::VARselect(log1p(mts_df_filter),
type = "none", #type of deterministic regressors to include. We use none becasue the time series was made stationary using differencing above.
lag.max = 10) #highest lag order
# Creating a VAR model with vars
var.a.mts_df_filter <- vars::VAR(log1p(mts_df_filter),
lag.max = 1, #highest lag order for lag length selection according to the choosen ic
ic = "AIC", #information criterion
type = "none") #type of deterministic regressors to include
#selecting the variables ot_health_index, dynamic_price,avg_market_premium_price
# Granger test for causality
#for causality function to give reliable results we need all the variables of the multivariate time series to be stationary.
vars::causality(var.a.mts_df_filter, #VAR model
cause = c("dynamic_price")) #cause variable. If not specified then first column of x is used. Multiple variables can be used.
# we forecast over a short horizon because beyond short horizon prediction becomes unreliable or uniform
fcast1 = stats::predict(var.a.mts_df_filter, n.ahead = 12)
par(mar = c(2.5,2.5,2.5,2.5))
plot(fcast1)
# Forecasting the dynamic_price
dynamic_price = fcast1$fcst[1]; dynamic_price # type list
# Extracting the forecast column
x = dynamic_price$dynamic_price[,1]
x2 = exp(x) - 1
# Adding data and forecast to one time series
dynamic_price_inv =ts(c(df_filter[,1], x2),
start = c(2001,1),
end = c(2021,12),
frequency = 12)
plot(dynamic_price_inv)
dynamic_price_inv_dataframe <- as.data.frame(dynamic_price_inv)
colnames(dynamic_price_inv_dataframe) <- c("x")
head(dynamic_price_inv_dataframe)
#theme_set(theme_bw())
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("") +
# scale_x_date(date_labels = "%Y-%m-%d", #date_breaks = "3 month",
#              breaks = seq.Date(from = as.Date("2001-12-31"),
#                                to = as.Date("2021-12-31"),
#                                by = "year")
)
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("") +
# scale_x_date(date_labels = "%Y-%m-%d", #date_breaks = "3 month",
#              breaks = seq.Date(from = as.Date("2001-12-31"),
#                                to = as.Date("2021-12-31"),
#                                by = "year")
)
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(aes(x=seq(1, 20), y = fixed_price, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(aes(x=seq(1, 20), y = df_filter$fixed_price, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(aes(x=seq(1, 20), y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
#geom_text(aes(x=seq(1, 20), y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(data=df_filter, aes(x=seq(1, 20), y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(data=df_filter, aes(x=seq(1, 225), y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 70, y = 220, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 0, y = 220, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
#annotate("text", x = 0, y = 220, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
View(dynamic_price_inv_dataframe)
?annotate
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = fixed_price[1], label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1], label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 1, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 0.005, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 0.5, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 0.05, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 0.02, label = "Some text") +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
df_filter$fixed_price[1]
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 50, y = df_filter$fixed_price[1] + 0.02, label = paste0("fixed premium = ", df_filter$fixed_price[1], sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.02, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2), sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.03, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2), sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.025, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2), sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"), x = seq(1, 240)), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"), x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.023, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2), sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"),
x = seq(1, 240), size = 0.7), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"),
x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.023, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2),
sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"),
x = seq(1, 240), size = 0.1), color = "green") +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"),
x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.023, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2),
sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"),
x = seq(1, 240)), color = "green", size = 0.1) +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"),
x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.023, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2),
sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
ggplot() +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[1:240,]), aes(y = get("dynamic_price_inv_dataframe[1:240, ]"),
x = seq(1, 240)), color = "green", size = 0.5) +
geom_line(data = as.data.frame(dynamic_price_inv_dataframe[241:252,]), aes(y = get("dynamic_price_inv_dataframe[241:252, ]"),
x = seq(241, 252)), color = "red") +
geom_line(data=df_filter, aes(x=seq(1, 252), y=fixed_price), color='red') +
annotate("text", x = 100, y = df_filter$fixed_price[1] + 0.023, label = paste0("fixed premium = ", round(df_filter$fixed_price[1], 2),
sep = "" )) +
#geom_text(data=df_filter, aes(x= 50, y = 200, label = "FB")) +
#ggtitle("Plot of forecast of the VAR model on  time series") +
#scale_x_date(date_breaks = "months" , date_labels = "%b-%y") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?setView
if(interactive()){
m <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18)
m  # the RStudio 'headquarter'
m %>% fitBounds(-72, 40, -70, 43)
m %>% clearBounds()  # world view
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
# extented fucntion
find_funs <- function(f) {
# Returns dataframe with two columns:
# `package_name`: packages(s) which the function is part of (chr)
# `builtin_package`:  whether the package comes with standard R (a 'builtin'  package)
# Arguments:
# f: name of function for which the package(s) are to be identified.
if ("tidyverse" %in% rownames(installed.packages()) == FALSE) {
cat("tidyverse is needed for this fuction. Please install. Stopping")
stop()}
suppressMessages(library(tidyverse))
# search for help in list of installed packages
help_installed <- help.search(paste0("^",f,"$"), agrep = FALSE)
# extract package name from help file
pckg_hits <- help_installed$matches[,"Package"]
if (length(pckg_hits) == 0) pckg_hits <- "No_results_found"
# get list of built-in packages
pckgs <- installed.packages()  %>% as_tibble
pckgs %>%
dplyr::filter(Priority %in% c("base","recommended")) %>%
dplyr::select(Package) %>%
distinct -> builtin_pckgs_df
# check for each element of 'pckg hit' whether its built-in and loaded (via match). Then print results.
results <- data_frame(
package_name = pckg_hits,
builtin_pckage = match(pckg_hits, builtin_pckgs_df$Package, nomatch = 0) > 0,
loaded = match(paste("package:",pckg_hits, sep = ""), search(), nomatch = 0) > 0
)
return(results)
}
find_funs("addMarkers")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
leaflet::addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
leaflet::addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m <- leaflet() %>%
dplyr::addTiles() %>%  # Add default OpenStreetMap map tiles
leaflet::addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
df_map2 <- df_testdata %>%
filter( #client_id == "client_0",
machine_id == "M_001")
shiny::runApp()
<<<<<<< HEAD
install.packages("fpp2")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("vars")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
=======
df_map2 <- df_testdata %>%
filter( #client_id == "client_0",
machine_id == "M_001")
# Show first 20 rows from the `quakes` dataset
leaflet(data = df_map2[1:5000]) %>% addTiles() %>%
addMarkers(lng = ~localization_lon, lat = ~localization_lat, popup = ~as.character(dynamic_price), label = ~as.character(round(dynamic_price), 3)) %>%
setView(lng = 10.4515, lat = 51.1657, zoom = 6)
# Show first 20 rows from the `quakes` dataset
leaflet(data = df_map2[1:5000],) %>% addTiles() %>%
addMarkers(lng = ~localization_lon, lat = ~localization_lat, popup = ~as.character(dynamic_price), label = ~as.character(round(dynamic_price), 3)) %>%
setView(lng = 10.4515, lat = 51.1657, zoom = 6)
# Show first 20 rows from the `quakes` dataset
leaflet(data = df_map2[1:5000, ]) %>% addTiles() %>%
addMarkers(lng = ~localization_lon, lat = ~localization_lat, popup = ~as.character(dynamic_price), label = ~as.character(round(dynamic_price), 3)) %>%
setView(lng = 10.4515, lat = 51.1657, zoom = 6)
>>>>>>> 06548005e98f8e0e695292805bce0de7447a2ccb
